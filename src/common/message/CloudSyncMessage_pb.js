// source: CloudSyncMessage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CloudSyncMessages.ContentIDChange', null, global);
goog.exportSymbol('proto.CloudSyncMessages.Correlation', null, global);
goog.exportSymbol('proto.CloudSyncMessages.DeviceRESP', null, global);
goog.exportSymbol('proto.CloudSyncMessages.DeviceStatus', null, global);
goog.exportSymbol('proto.CloudSyncMessages.JoinREQ', null, global);
goog.exportSymbol('proto.CloudSyncMessages.JoinRESP', null, global);
goog.exportSymbol('proto.CloudSyncMessages.PresentationTimestamp', null, global);
goog.exportSymbol('proto.CloudSyncMessages.StopTimelineUpdateREQ', null, global);
goog.exportSymbol('proto.CloudSyncMessages.SyncTimelinesAvailable', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineDeregistrationREQ', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineInfo', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineQuery', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineREQ', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineRESP', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineRegistrationREQ', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineRegistrationRESP', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineSubscriptionREQ', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineSubscriptionRESP', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineUpdate', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineUpdateREQ', null, global);
goog.exportSymbol('proto.CloudSyncMessages.TimelineUpdateRESP', null, global);
goog.exportSymbol('proto.CloudSyncMessages.Timestamp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineInfo.displayName = 'proto.CloudSyncMessages.TimelineInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.Correlation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.Correlation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.Correlation.displayName = 'proto.CloudSyncMessages.Correlation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.Timestamp.displayName = 'proto.CloudSyncMessages.Timestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.PresentationTimestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.PresentationTimestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.PresentationTimestamp.displayName = 'proto.CloudSyncMessages.PresentationTimestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.JoinREQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.JoinREQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.JoinREQ.displayName = 'proto.CloudSyncMessages.JoinREQ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.JoinRESP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.JoinRESP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.JoinRESP.displayName = 'proto.CloudSyncMessages.JoinRESP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.DeviceRESP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CloudSyncMessages.DeviceRESP.repeatedFields_, null);
};
goog.inherits(proto.CloudSyncMessages.DeviceRESP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.DeviceRESP.displayName = 'proto.CloudSyncMessages.DeviceRESP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineRegistrationREQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineRegistrationREQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineRegistrationREQ.displayName = 'proto.CloudSyncMessages.TimelineRegistrationREQ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineRegistrationRESP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineRegistrationRESP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineRegistrationRESP.displayName = 'proto.CloudSyncMessages.TimelineRegistrationRESP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineDeregistrationREQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineDeregistrationREQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineDeregistrationREQ.displayName = 'proto.CloudSyncMessages.TimelineDeregistrationREQ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineREQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineREQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineREQ.displayName = 'proto.CloudSyncMessages.TimelineREQ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineQuery.displayName = 'proto.CloudSyncMessages.TimelineQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineRESP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CloudSyncMessages.TimelineRESP.repeatedFields_, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineRESP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineRESP.displayName = 'proto.CloudSyncMessages.TimelineRESP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineSubscriptionREQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineSubscriptionREQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineSubscriptionREQ.displayName = 'proto.CloudSyncMessages.TimelineSubscriptionREQ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineSubscriptionRESP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineSubscriptionRESP.displayName = 'proto.CloudSyncMessages.TimelineSubscriptionRESP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineUpdateREQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineUpdateREQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineUpdateREQ.displayName = 'proto.CloudSyncMessages.TimelineUpdateREQ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineUpdateRESP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineUpdateRESP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineUpdateRESP.displayName = 'proto.CloudSyncMessages.TimelineUpdateRESP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.StopTimelineUpdateREQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.StopTimelineUpdateREQ.displayName = 'proto.CloudSyncMessages.StopTimelineUpdateREQ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.TimelineUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.TimelineUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.TimelineUpdate.displayName = 'proto.CloudSyncMessages.TimelineUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.ContentIDChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.ContentIDChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.ContentIDChange.displayName = 'proto.CloudSyncMessages.ContentIDChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.DeviceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloudSyncMessages.DeviceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.DeviceStatus.displayName = 'proto.CloudSyncMessages.DeviceStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloudSyncMessages.SyncTimelinesAvailable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CloudSyncMessages.SyncTimelinesAvailable.repeatedFields_, null);
};
goog.inherits(proto.CloudSyncMessages.SyncTimelinesAvailable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloudSyncMessages.SyncTimelinesAvailable.displayName = 'proto.CloudSyncMessages.SyncTimelinesAvailable';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timelinetype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    frequency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    contentid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    providerid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    providertype: jspb.Message.getFieldWithDefault(msg, 6, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 7, ""),
    useforsessionsync: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    isavailable: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    parenttimelineid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    parentcorrelation: (f = msg.getParentcorrelation()) && proto.CloudSyncMessages.Correlation.toObject(includeInstance, f),
    lasttimestamp: (f = msg.getLasttimestamp()) && proto.CloudSyncMessages.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineInfo}
 */
proto.CloudSyncMessages.TimelineInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineInfo;
  return proto.CloudSyncMessages.TimelineInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineInfo}
 */
proto.CloudSyncMessages.TimelineInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelinetype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrequency(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProviderid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvidertype(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseforsessionsync(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsavailable(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setParenttimelineid(value);
      break;
    case 11:
      var value = new proto.CloudSyncMessages.Correlation;
      reader.readMessage(value,proto.CloudSyncMessages.Correlation.deserializeBinaryFromReader);
      msg.setParentcorrelation(value);
      break;
    case 12:
      var value = new proto.CloudSyncMessages.Timestamp;
      reader.readMessage(value,proto.CloudSyncMessages.Timestamp.deserializeBinaryFromReader);
      msg.setLasttimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimelinetype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getContentid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProviderid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProvidertype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUseforsessionsync();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getIsavailable();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getParenttimelineid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getParentcorrelation();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.CloudSyncMessages.Correlation.serializeBinaryToWriter
    );
  }
  f = message.getLasttimestamp();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.CloudSyncMessages.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string timelineID = 1;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setTimelineid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string timelineType = 2;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getTimelinetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setTimelinetype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 frequency = 3;
 * @return {number}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setFrequency = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string contentID = 4;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setContentid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string providerID = 5;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getProviderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setProviderid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string providerType = 6;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getProvidertype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setProvidertype = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string channel = 7;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool useForSessionSync = 8;
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getUseforsessionsync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setUseforsessionsync = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool isAvailable = 9;
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getIsavailable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setIsavailable = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string parentTimelineId = 10;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getParenttimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setParenttimelineid = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional Correlation parentCorrelation = 11;
 * @return {?proto.CloudSyncMessages.Correlation}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getParentcorrelation = function() {
  return /** @type{?proto.CloudSyncMessages.Correlation} */ (
    jspb.Message.getWrapperField(this, proto.CloudSyncMessages.Correlation, 11));
};


/** @param {?proto.CloudSyncMessages.Correlation|undefined} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setParentcorrelation = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.CloudSyncMessages.TimelineInfo.prototype.clearParentcorrelation = function() {
  this.setParentcorrelation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.hasParentcorrelation = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Timestamp lastTimestamp = 12;
 * @return {?proto.CloudSyncMessages.Timestamp}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.getLasttimestamp = function() {
  return /** @type{?proto.CloudSyncMessages.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.CloudSyncMessages.Timestamp, 12));
};


/** @param {?proto.CloudSyncMessages.Timestamp|undefined} value */
proto.CloudSyncMessages.TimelineInfo.prototype.setLasttimestamp = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.CloudSyncMessages.TimelineInfo.prototype.clearLasttimestamp = function() {
  this.setLasttimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineInfo.prototype.hasLasttimestamp = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.Correlation.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.Correlation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.Correlation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.Correlation.toObject = function(includeInstance, msg) {
  var f, obj = {
    childtime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    parenttime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    initialerror: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    errorgrowthrate: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.Correlation}
 */
proto.CloudSyncMessages.Correlation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.Correlation;
  return proto.CloudSyncMessages.Correlation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.Correlation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.Correlation}
 */
proto.CloudSyncMessages.Correlation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChildtime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setParenttime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInitialerror(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setErrorgrowthrate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.Correlation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.Correlation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.Correlation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.Correlation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChildtime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getParenttime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getInitialerror();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getErrorgrowthrate();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double childTime = 1;
 * @return {number}
 */
proto.CloudSyncMessages.Correlation.prototype.getChildtime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.CloudSyncMessages.Correlation.prototype.setChildtime = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double parentTime = 2;
 * @return {number}
 */
proto.CloudSyncMessages.Correlation.prototype.getParenttime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.CloudSyncMessages.Correlation.prototype.setParenttime = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double initialError = 3;
 * @return {number}
 */
proto.CloudSyncMessages.Correlation.prototype.getInitialerror = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.CloudSyncMessages.Correlation.prototype.setInitialerror = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double errorGrowthRate = 4;
 * @return {number}
 */
proto.CloudSyncMessages.Correlation.prototype.getErrorgrowthrate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.CloudSyncMessages.Correlation.prototype.setErrorgrowthrate = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    contenttime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    wallclocktime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.Timestamp}
 */
proto.CloudSyncMessages.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.Timestamp;
  return proto.CloudSyncMessages.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.Timestamp}
 */
proto.CloudSyncMessages.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContenttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWallclocktime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContenttime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getWallclocktime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double contentTime = 1;
 * @return {number}
 */
proto.CloudSyncMessages.Timestamp.prototype.getContenttime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.CloudSyncMessages.Timestamp.prototype.setContenttime = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double wallclockTime = 2;
 * @return {number}
 */
proto.CloudSyncMessages.Timestamp.prototype.getWallclocktime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.CloudSyncMessages.Timestamp.prototype.setWallclocktime = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double speed = 3;
 * @return {number}
 */
proto.CloudSyncMessages.Timestamp.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.CloudSyncMessages.Timestamp.prototype.setSpeed = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.PresentationTimestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.PresentationTimestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.PresentationTimestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    earliest: (f = msg.getEarliest()) && proto.CloudSyncMessages.Timestamp.toObject(includeInstance, f),
    actual: (f = msg.getActual()) && proto.CloudSyncMessages.Timestamp.toObject(includeInstance, f),
    latest: (f = msg.getLatest()) && proto.CloudSyncMessages.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.PresentationTimestamp}
 */
proto.CloudSyncMessages.PresentationTimestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.PresentationTimestamp;
  return proto.CloudSyncMessages.PresentationTimestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.PresentationTimestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.PresentationTimestamp}
 */
proto.CloudSyncMessages.PresentationTimestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CloudSyncMessages.Timestamp;
      reader.readMessage(value,proto.CloudSyncMessages.Timestamp.deserializeBinaryFromReader);
      msg.setEarliest(value);
      break;
    case 2:
      var value = new proto.CloudSyncMessages.Timestamp;
      reader.readMessage(value,proto.CloudSyncMessages.Timestamp.deserializeBinaryFromReader);
      msg.setActual(value);
      break;
    case 3:
      var value = new proto.CloudSyncMessages.Timestamp;
      reader.readMessage(value,proto.CloudSyncMessages.Timestamp.deserializeBinaryFromReader);
      msg.setLatest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.PresentationTimestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.PresentationTimestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.PresentationTimestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEarliest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CloudSyncMessages.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getActual();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CloudSyncMessages.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLatest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CloudSyncMessages.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional Timestamp earliest = 1;
 * @return {?proto.CloudSyncMessages.Timestamp}
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.getEarliest = function() {
  return /** @type{?proto.CloudSyncMessages.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.CloudSyncMessages.Timestamp, 1));
};


/** @param {?proto.CloudSyncMessages.Timestamp|undefined} value */
proto.CloudSyncMessages.PresentationTimestamp.prototype.setEarliest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.clearEarliest = function() {
  this.setEarliest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.hasEarliest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Timestamp actual = 2;
 * @return {?proto.CloudSyncMessages.Timestamp}
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.getActual = function() {
  return /** @type{?proto.CloudSyncMessages.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.CloudSyncMessages.Timestamp, 2));
};


/** @param {?proto.CloudSyncMessages.Timestamp|undefined} value */
proto.CloudSyncMessages.PresentationTimestamp.prototype.setActual = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.clearActual = function() {
  this.setActual(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.hasActual = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Timestamp latest = 3;
 * @return {?proto.CloudSyncMessages.Timestamp}
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.getLatest = function() {
  return /** @type{?proto.CloudSyncMessages.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.CloudSyncMessages.Timestamp, 3));
};


/** @param {?proto.CloudSyncMessages.Timestamp|undefined} value */
proto.CloudSyncMessages.PresentationTimestamp.prototype.setLatest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.clearLatest = function() {
  this.setLatest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CloudSyncMessages.PresentationTimestamp.prototype.hasLatest = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.JoinREQ.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.JoinREQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.JoinREQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.JoinREQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestchannel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    synctlstrategy: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.JoinREQ}
 */
proto.CloudSyncMessages.JoinREQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.JoinREQ;
  return proto.CloudSyncMessages.JoinREQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.JoinREQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.JoinREQ}
 */
proto.CloudSyncMessages.JoinREQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestchannel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSynctlstrategy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.JoinREQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.JoinREQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.JoinREQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.JoinREQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestchannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSynctlstrategy();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string requestChannel = 1;
 * @return {string}
 */
proto.CloudSyncMessages.JoinREQ.prototype.getRequestchannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.JoinREQ.prototype.setRequestchannel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 syncTLStrategy = 2;
 * @return {number}
 */
proto.CloudSyncMessages.JoinREQ.prototype.getSynctlstrategy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.CloudSyncMessages.JoinREQ.prototype.setSynctlstrategy = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.JoinRESP.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.JoinRESP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.JoinRESP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.JoinRESP.toObject = function(includeInstance, msg) {
  var f, obj = {
    wallclockurl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.JoinRESP}
 */
proto.CloudSyncMessages.JoinRESP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.JoinRESP;
  return proto.CloudSyncMessages.JoinRESP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.JoinRESP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.JoinRESP}
 */
proto.CloudSyncMessages.JoinRESP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWallclockurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.JoinRESP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.JoinRESP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.JoinRESP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.JoinRESP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWallclockurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string wallclockURL = 1;
 * @return {string}
 */
proto.CloudSyncMessages.JoinRESP.prototype.getWallclockurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.JoinRESP.prototype.setWallclockurl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CloudSyncMessages.DeviceRESP.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.DeviceRESP.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.DeviceRESP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.DeviceRESP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.DeviceRESP.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.DeviceRESP}
 */
proto.CloudSyncMessages.DeviceRESP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.DeviceRESP;
  return proto.CloudSyncMessages.DeviceRESP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.DeviceRESP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.DeviceRESP}
 */
proto.CloudSyncMessages.DeviceRESP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.DeviceRESP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.DeviceRESP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.DeviceRESP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.DeviceRESP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string devices = 1;
 * @return {!Array<string>}
 */
proto.CloudSyncMessages.DeviceRESP.prototype.getDevicesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.CloudSyncMessages.DeviceRESP.prototype.setDevicesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.CloudSyncMessages.DeviceRESP.prototype.addDevices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.CloudSyncMessages.DeviceRESP.prototype.clearDevicesList = function() {
  this.setDevicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineRegistrationREQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineRegistrationREQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timelinetype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 4, ""),
    frequency: jspb.Message.getFieldWithDefault(msg, 5, 0),
    correlation: (f = msg.getCorrelation()) && proto.CloudSyncMessages.Correlation.toObject(includeInstance, f),
    useforsessionsync: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineRegistrationREQ}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineRegistrationREQ;
  return proto.CloudSyncMessages.TimelineRegistrationREQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineRegistrationREQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineRegistrationREQ}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelinetype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrequency(value);
      break;
    case 6:
      var value = new proto.CloudSyncMessages.Correlation;
      reader.readMessage(value,proto.CloudSyncMessages.Correlation.deserializeBinaryFromReader);
      msg.setCorrelation(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseforsessionsync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineRegistrationREQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineRegistrationREQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimelinetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getCorrelation();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.CloudSyncMessages.Correlation.serializeBinaryToWriter
    );
  }
  f = message.getUseforsessionsync();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string timelineID = 1;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.setTimelineid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contentID = 2;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.setContentid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string timelineType = 3;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.getTimelinetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.setTimelinetype = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string channel = 4;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 frequency = 5;
 * @return {number}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.setFrequency = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Correlation correlation = 6;
 * @return {?proto.CloudSyncMessages.Correlation}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.getCorrelation = function() {
  return /** @type{?proto.CloudSyncMessages.Correlation} */ (
    jspb.Message.getWrapperField(this, proto.CloudSyncMessages.Correlation, 6));
};


/** @param {?proto.CloudSyncMessages.Correlation|undefined} value */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.setCorrelation = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.clearCorrelation = function() {
  this.setCorrelation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.hasCorrelation = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool useForSessionSync = 7;
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.getUseforsessionsync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.CloudSyncMessages.TimelineRegistrationREQ.prototype.setUseforsessionsync = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineRegistrationRESP.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineRegistrationRESP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineRegistrationRESP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineRegistrationRESP.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineupdatechannel: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineRegistrationRESP}
 */
proto.CloudSyncMessages.TimelineRegistrationRESP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineRegistrationRESP;
  return proto.CloudSyncMessages.TimelineRegistrationRESP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineRegistrationRESP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineRegistrationRESP}
 */
proto.CloudSyncMessages.TimelineRegistrationRESP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineupdatechannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineRegistrationRESP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineRegistrationRESP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineRegistrationRESP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineRegistrationRESP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineupdatechannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string timelineUpdateChannel = 1;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineRegistrationRESP.prototype.getTimelineupdatechannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineRegistrationRESP.prototype.setTimelineupdatechannel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineDeregistrationREQ.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineDeregistrationREQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineDeregistrationREQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineDeregistrationREQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineDeregistrationREQ}
 */
proto.CloudSyncMessages.TimelineDeregistrationREQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineDeregistrationREQ;
  return proto.CloudSyncMessages.TimelineDeregistrationREQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineDeregistrationREQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineDeregistrationREQ}
 */
proto.CloudSyncMessages.TimelineDeregistrationREQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineDeregistrationREQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineDeregistrationREQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineDeregistrationREQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineDeregistrationREQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string timelineID = 1;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineDeregistrationREQ.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineDeregistrationREQ.prototype.setTimelineid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineREQ.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineREQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineREQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineREQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    synctimeline: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineREQ}
 */
proto.CloudSyncMessages.TimelineREQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineREQ;
  return proto.CloudSyncMessages.TimelineREQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineREQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineREQ}
 */
proto.CloudSyncMessages.TimelineREQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSynctimeline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineREQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineREQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineREQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineREQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSynctimeline();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool syncTimeline = 1;
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineREQ.prototype.getSynctimeline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.CloudSyncMessages.TimelineREQ.prototype.setSynctimeline = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    providerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timelinetype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    synctimeline: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineQuery}
 */
proto.CloudSyncMessages.TimelineQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineQuery;
  return proto.CloudSyncMessages.TimelineQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineQuery}
 */
proto.CloudSyncMessages.TimelineQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProviderid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelinetype(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSynctimeline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProviderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimelinetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSynctimeline();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string providerId = 1;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineQuery.prototype.getProviderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineQuery.prototype.setProviderid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contentID = 2;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineQuery.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineQuery.prototype.setContentid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string timelineType = 3;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineQuery.prototype.getTimelinetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineQuery.prototype.setTimelinetype = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool syncTimeline = 4;
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineQuery.prototype.getSynctimeline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.CloudSyncMessages.TimelineQuery.prototype.setSynctimeline = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CloudSyncMessages.TimelineRESP.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineRESP.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineRESP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineRESP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineRESP.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineinfoList: jspb.Message.toObjectList(msg.getTimelineinfoList(),
    proto.CloudSyncMessages.TimelineInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineRESP}
 */
proto.CloudSyncMessages.TimelineRESP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineRESP;
  return proto.CloudSyncMessages.TimelineRESP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineRESP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineRESP}
 */
proto.CloudSyncMessages.TimelineRESP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CloudSyncMessages.TimelineInfo;
      reader.readMessage(value,proto.CloudSyncMessages.TimelineInfo.deserializeBinaryFromReader);
      msg.addTimelineinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineRESP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineRESP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineRESP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineRESP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CloudSyncMessages.TimelineInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TimelineInfo timelineInfo = 1;
 * @return {!Array<!proto.CloudSyncMessages.TimelineInfo>}
 */
proto.CloudSyncMessages.TimelineRESP.prototype.getTimelineinfoList = function() {
  return /** @type{!Array<!proto.CloudSyncMessages.TimelineInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CloudSyncMessages.TimelineInfo, 1));
};


/** @param {!Array<!proto.CloudSyncMessages.TimelineInfo>} value */
proto.CloudSyncMessages.TimelineRESP.prototype.setTimelineinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CloudSyncMessages.TimelineInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CloudSyncMessages.TimelineInfo}
 */
proto.CloudSyncMessages.TimelineRESP.prototype.addTimelineinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CloudSyncMessages.TimelineInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.CloudSyncMessages.TimelineRESP.prototype.clearTimelineinfoList = function() {
  this.setTimelineinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineSubscriptionREQ.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineSubscriptionREQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineSubscriptionREQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineSubscriptionREQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineSubscriptionREQ}
 */
proto.CloudSyncMessages.TimelineSubscriptionREQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineSubscriptionREQ;
  return proto.CloudSyncMessages.TimelineSubscriptionREQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineSubscriptionREQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineSubscriptionREQ}
 */
proto.CloudSyncMessages.TimelineSubscriptionREQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineSubscriptionREQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineSubscriptionREQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineSubscriptionREQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineSubscriptionREQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string timelineID = 1;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineSubscriptionREQ.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineSubscriptionREQ.prototype.setTimelineid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineSubscriptionRESP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineSubscriptionRESP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeline: (f = msg.getTimeline()) && proto.CloudSyncMessages.TimelineInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineSubscriptionRESP}
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineSubscriptionRESP;
  return proto.CloudSyncMessages.TimelineSubscriptionRESP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineSubscriptionRESP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineSubscriptionRESP}
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CloudSyncMessages.TimelineInfo;
      reader.readMessage(value,proto.CloudSyncMessages.TimelineInfo.deserializeBinaryFromReader);
      msg.setTimeline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineSubscriptionRESP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineSubscriptionRESP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeline();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CloudSyncMessages.TimelineInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimelineInfo timeline = 1;
 * @return {?proto.CloudSyncMessages.TimelineInfo}
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP.prototype.getTimeline = function() {
  return /** @type{?proto.CloudSyncMessages.TimelineInfo} */ (
    jspb.Message.getWrapperField(this, proto.CloudSyncMessages.TimelineInfo, 1));
};


/** @param {?proto.CloudSyncMessages.TimelineInfo|undefined} value */
proto.CloudSyncMessages.TimelineSubscriptionRESP.prototype.setTimeline = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP.prototype.clearTimeline = function() {
  this.setTimeline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineSubscriptionRESP.prototype.hasTimeline = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineUpdateREQ.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineUpdateREQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineUpdateREQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineUpdateREQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timelinetype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contentid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineUpdateREQ}
 */
proto.CloudSyncMessages.TimelineUpdateREQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineUpdateREQ;
  return proto.CloudSyncMessages.TimelineUpdateREQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineUpdateREQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineUpdateREQ}
 */
proto.CloudSyncMessages.TimelineUpdateREQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelinetype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineUpdateREQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineUpdateREQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineUpdateREQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineUpdateREQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimelinetype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContentid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string timelineID = 1;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineUpdateREQ.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineUpdateREQ.prototype.setTimelineid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string timelineType = 2;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineUpdateREQ.prototype.getTimelinetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineUpdateREQ.prototype.setTimelinetype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contentID = 3;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineUpdateREQ.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineUpdateREQ.prototype.setContentid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineUpdateRESP.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineUpdateRESP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineUpdateRESP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineUpdateRESP.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineUpdateRESP}
 */
proto.CloudSyncMessages.TimelineUpdateRESP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineUpdateRESP;
  return proto.CloudSyncMessages.TimelineUpdateRESP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineUpdateRESP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineUpdateRESP}
 */
proto.CloudSyncMessages.TimelineUpdateRESP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineUpdateRESP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineUpdateRESP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineUpdateRESP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineUpdateRESP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string timelineID = 1;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineUpdateRESP.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineUpdateRESP.prototype.setTimelineid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.StopTimelineUpdateREQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.StopTimelineUpdateREQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timelinetype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contentid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.StopTimelineUpdateREQ}
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.StopTimelineUpdateREQ;
  return proto.CloudSyncMessages.StopTimelineUpdateREQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.StopTimelineUpdateREQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.StopTimelineUpdateREQ}
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelinetype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.StopTimelineUpdateREQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.StopTimelineUpdateREQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimelinetype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContentid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string timelineID = 1;
 * @return {string}
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.StopTimelineUpdateREQ.prototype.setTimelineid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string timelineType = 2;
 * @return {string}
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ.prototype.getTimelinetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.StopTimelineUpdateREQ.prototype.setTimelinetype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contentID = 3;
 * @return {string}
 */
proto.CloudSyncMessages.StopTimelineUpdateREQ.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.StopTimelineUpdateREQ.prototype.setContentid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.TimelineUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.TimelineUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.TimelineUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timelinetype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contentid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    presentationtimestamp: (f = msg.getPresentationtimestamp()) && proto.CloudSyncMessages.PresentationTimestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.TimelineUpdate}
 */
proto.CloudSyncMessages.TimelineUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.TimelineUpdate;
  return proto.CloudSyncMessages.TimelineUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.TimelineUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.TimelineUpdate}
 */
proto.CloudSyncMessages.TimelineUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelinetype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    case 4:
      var value = new proto.CloudSyncMessages.PresentationTimestamp;
      reader.readMessage(value,proto.CloudSyncMessages.PresentationTimestamp.deserializeBinaryFromReader);
      msg.setPresentationtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.TimelineUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.TimelineUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.TimelineUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.TimelineUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimelinetype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContentid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPresentationtimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.CloudSyncMessages.PresentationTimestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string timelineID = 1;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineUpdate.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineUpdate.prototype.setTimelineid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string timelineType = 2;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineUpdate.prototype.getTimelinetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineUpdate.prototype.setTimelinetype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contentID = 3;
 * @return {string}
 */
proto.CloudSyncMessages.TimelineUpdate.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.TimelineUpdate.prototype.setContentid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PresentationTimestamp presentationTimestamp = 4;
 * @return {?proto.CloudSyncMessages.PresentationTimestamp}
 */
proto.CloudSyncMessages.TimelineUpdate.prototype.getPresentationtimestamp = function() {
  return /** @type{?proto.CloudSyncMessages.PresentationTimestamp} */ (
    jspb.Message.getWrapperField(this, proto.CloudSyncMessages.PresentationTimestamp, 4));
};


/** @param {?proto.CloudSyncMessages.PresentationTimestamp|undefined} value */
proto.CloudSyncMessages.TimelineUpdate.prototype.setPresentationtimestamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.CloudSyncMessages.TimelineUpdate.prototype.clearPresentationtimestamp = function() {
  this.setPresentationtimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CloudSyncMessages.TimelineUpdate.prototype.hasPresentationtimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.ContentIDChange.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.ContentIDChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.ContentIDChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.ContentIDChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    contentid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.ContentIDChange}
 */
proto.CloudSyncMessages.ContentIDChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.ContentIDChange;
  return proto.CloudSyncMessages.ContentIDChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.ContentIDChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.ContentIDChange}
 */
proto.CloudSyncMessages.ContentIDChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.ContentIDChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.ContentIDChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.ContentIDChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.ContentIDChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContentid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string contentID = 1;
 * @return {string}
 */
proto.CloudSyncMessages.ContentIDChange.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.ContentIDChange.prototype.setContentid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.DeviceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.DeviceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.DeviceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.DeviceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.DeviceStatus}
 */
proto.CloudSyncMessages.DeviceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.DeviceStatus;
  return proto.CloudSyncMessages.DeviceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.DeviceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.DeviceStatus}
 */
proto.CloudSyncMessages.DeviceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.DeviceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.DeviceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.DeviceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.DeviceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.CloudSyncMessages.DeviceStatus.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.DeviceStatus.prototype.setDevice = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.CloudSyncMessages.DeviceStatus.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CloudSyncMessages.DeviceStatus.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.prototype.toObject = function(opt_includeInstance) {
  return proto.CloudSyncMessages.SyncTimelinesAvailable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloudSyncMessages.SyncTimelinesAvailable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineinfoList: jspb.Message.toObjectList(msg.getTimelineinfoList(),
    proto.CloudSyncMessages.TimelineInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloudSyncMessages.SyncTimelinesAvailable}
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloudSyncMessages.SyncTimelinesAvailable;
  return proto.CloudSyncMessages.SyncTimelinesAvailable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloudSyncMessages.SyncTimelinesAvailable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloudSyncMessages.SyncTimelinesAvailable}
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CloudSyncMessages.TimelineInfo;
      reader.readMessage(value,proto.CloudSyncMessages.TimelineInfo.deserializeBinaryFromReader);
      msg.addTimelineinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloudSyncMessages.SyncTimelinesAvailable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloudSyncMessages.SyncTimelinesAvailable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimelineinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CloudSyncMessages.TimelineInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TimelineInfo timelineInfo = 1;
 * @return {!Array<!proto.CloudSyncMessages.TimelineInfo>}
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.prototype.getTimelineinfoList = function() {
  return /** @type{!Array<!proto.CloudSyncMessages.TimelineInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CloudSyncMessages.TimelineInfo, 1));
};


/** @param {!Array<!proto.CloudSyncMessages.TimelineInfo>} value */
proto.CloudSyncMessages.SyncTimelinesAvailable.prototype.setTimelineinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CloudSyncMessages.TimelineInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CloudSyncMessages.TimelineInfo}
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.prototype.addTimelineinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CloudSyncMessages.TimelineInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.CloudSyncMessages.SyncTimelinesAvailable.prototype.clearTimelineinfoList = function() {
  this.setTimelineinfoList([]);
};


goog.object.extend(exports, proto.CloudSyncMessages);
